name: CI/CD - Go App Docker Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  IMAGE_NAME: rajasekhar23/goapp

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Run Unit Tests
        run: go test ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest

  docker-build:
    runs-on: ubuntu-latest
    needs: build-test-lint
    permissions:
      contents: write # needed for tagging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Version from Git Tags
        id: vars
        run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.1")
          echo "tag=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.tag }}
            ${{ env.IMAGE_NAME }}:latest

      - name: Scan Image with Trivy
        uses: aquasecurity/trivy-action@v0.30.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.tag }}
          format: table
          exit-code: 1
          vuln-type: os,library
          severity: CRITICAL,HIGH

  tag-latest:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Create new Git Tag
        run: |
          git fetch --tags
          latest=$(git tag --sort=-creatordate | head -n1)
          if [[ "$latest" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch=$((BASH_REMATCH[3]+1))
            new_tag="v$major.$minor.$patch"
          else
            new_tag="v0.0.1"
          fi
          echo "New tag: $new_tag"
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag $new_tag
          git push origin $new_tag
